<?xml version="1.0" encoding="UTF-8"?>
<configuration status="info">
    <!-- 날짜 / 스레드명 / 로깅레벨 / 로그 최대 글자수(36) / 메소드명:줄 / 로그메시지 -->
    <property name="LOG_PATTERN_COLOR"
              value="%green(%d{yyyy-MM-dd HH:mm:ss.SSS}) %magenta([%thread]) %highlight(%-5level) %cyan(%logger{36}.%method:%line) - %yellow(%msg%n)"></property>
    <property name="LOG_PATTERN_WITHOUT_COLOR"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36}.%method:%line - %msg%n"/>
    <property name="TIME_CHECK_LOG_PATTERN_COLOR"
              value="%green(%d{yyyy-MM-dd HH:mm:ss.SSS}) %magenta([%thread]) %yellow(%msg%n)"></property>

    <!-- appender는 로그를 어떤 방식으로 넣을 것인지 설정 -->
    <appender name="TIME_CHECK" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <file>logs/TimeCheck.log</file>

        <encoder>
            <pattern>${TIME_CHECK_LOG_PATTERN_COLOR}</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/time/%d{yyyy-MM-dd}_%i.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize> <!-- 10MB를 초과하면 파일 압축 -->
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>30</maxHistory> <!-- 로그 파일을 최대 30개까지 유지하고 이 값을 초과하면 가장 오래된 파일 삭제 -->
        </rollingPolicy>
    </appender>

    <appender name="DeletionTask" class="ch.qos.logback.core.FileAppender">
        <file>logs/DeletionTask.log</file>
        <append>true</append> <!-- 새로운 로그는 기존 로그 파일의 끝에 추가 -->
        <encoder>
            <pattern>${LOG_PATTERN_WITHOUT_COLOR}</pattern>
        </encoder>
    </appender>

    <appender name="SERVICE_INFO" class="ch.qos.logback.core.FileAppender">
        <append>true</append>
        <file>logs/ServiceInfo.log</file>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <encoder>
            <pattern>${LOG_PATTERN_COLOR}</pattern>
        </encoder>
    </appender>

    <!-- slack -->
    <springProperty name="SLACK_WEBHOOK_URI" source="logging.slack.webhook-url"/>
    <appender name="SLACK" class="com.github.maricn.logback.SlackAppender">
        <webhookUri>${SLACK_WEBHOOK_URI}</webhookUri>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %msg %n</pattern>
        </layout>
        <username>server-error</username>
        <queueSize>3</queueSize>
        <discardingThreshold>0</discardingThreshold>
    </appender>

    <appender name="ASYNC_SLACK" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="SLACK"/>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>


    <!-- 로그 지정 -->
    <logger name="com.map.gaja.global.schedule.DeletionTask" level="INFO" additivity="false">
        <appender-ref ref="DeletionTask"/> <!-- 삭제 스케줄링 -->
    </logger>

    <logger name="com.map.gaja.global.log.TimeCheckLogAspect" level="INFO" additivity="false">
        <appender-ref ref="TIME_CHECK"></appender-ref> <!-- 로직 시간 측정 -->
    </logger>

    <root level="INFO">
        <appender-ref ref="SERVICE_INFO"></appender-ref>
        <appender-ref ref="ASYNC_SLACK"></appender-ref>
    </root>
</configuration>